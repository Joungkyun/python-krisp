def modversion () :
	return '2.0.0'

def moduversion () :
	return '002000000'

def long2ip (longip) :
    ip = [ 0, 0, 0, 0]
    for i in xrange (0, 4) :
        ip[i] = longip % 256
        longip /= 256

    ip.reverse ()
    return '.'.join (map (str, ip))

from copy import deepcopy

class search_skelton :
	pass

keys = [
		'verbose', 'ip', 'netmask', 'start', 'end', 'icode',
		'iname', 'ccode', 'cname'
]

keys_ex = [
		'ip', 'start', 'end', 'size', 'dummydata',
]

def search (db, host, err = []) :
	r = _krisp.search (db, host)
	if ( r == None ) :
		err[0] = deepcopy (r.err)
		return None

	v = search_skelton ()

	for key in keys :
		if key == 'netmask' :
			setattr (v, 'netmask', deepcopy (long2ip (r.netmask)))
			setattr (v, 'network', deepcopy (long2ip (network (r.start, r.netmask))))
			setattr (v, 'broadcast', deepcopy (long2ip (broadcast(r.start, r.netmask))))
		elif key == 'start' :
			setattr (v, key, deepcopy (long2ip(r.start)))
		elif key == 'end' :
			setattr (v, key, deepcopy (long2ip(r.end)))
		else :
			setattr (v, key, deepcopy (getattr(r, key)))


	_krisp.free_search (r);
	return v

import re

def search_ex (db, host, table, err = []) :
	r = _krisp.search_ex (db, host, table)
	if ( r == None ) :
		err[0] = deepcopy (r.err)
		return None

	v = search_skelton ()

	for key in keys_ex :
		if key == 'dummy' or key == 'dummydata' :
			continue

		if key == 'start' or key == 'end' :
			setattr (v, key, long2ip (getattr (r, key)))
		else :
			setattr (v, key, deepcopy (getattr (r, key)))

	mask = netmask (r.start, r.end)
	setattr (v, 'netmask', long2ip (mask));
	setattr (v, 'network', long2ip (network (r.start, mask)));
	setattr (v, 'broadcast', long2ip (broadcast(r.start, mask)));

	ar = re.split (':', r.dummydata)
	setattr (v, 'dummy', deepcopy (ar));
	
	_krisp.free_search_ex (r)

	return v
